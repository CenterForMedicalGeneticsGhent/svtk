#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright Â© 2017 Matthew Stone <mstone5@mgh.harvard.edu>
# Distributed under terms of the MIT license.

"""
Standardize a VCF of SV calls.

Each record corresponds to a single SV breakpoint and will have the following
INFO fields, with specified constraints:
  SVTYPE:  SV type [DEL,DUP,INV,BND]
  CHR2:    Secondary chromosome [Must be lexicographically greater than CHROM]
  END:     SV end position (or position on CHR2 in translocations)
  STRANDS: Breakpoint strandedness [++,+-,-+,--]
  SVLEN:   SV length (-1 if translocation)
"""

import argparse
import pkg_resources
from svtools.standardize import standardize_vcf, VCFStandardizer
from pysam import VariantFile


def main():
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('vcf', help='Raw VCF')
    parser.add_argument('fout', help='Standardized VCF')
    parser.add_argument('source', help='Source algorithm')
    parser.add_argument('--standardizer', help='Path to python file with '
                        'custom standardizer definition.')
    args = parser.parse_args()

    template = pkg_resources.resource_filename('svtools',
                                               'data/standard_template.vcf')
    template = VariantFile(template)
    vcf = VariantFile(args.vcf)

    # Template header includes all necessary FILTER, INFO, and FORMAT fields
    # Just need to add samples from VCF being standardized
    header = template.header
    for sample in vcf.header.samples:
        header.add_sample(sample)

    fout = VariantFile(args.fout, mode='w', header=header)

    standardizer = VCFStandardizer.create(args.source, vcf, fout)
    for record in standardizer.standardize():
        fout.write(record)

    #  for std_rec in standardize_vcf(vcf, fout):
        #  fout.write(std_rec)

    fout.close()
    vcf.close()


if __name__ == '__main__':
    main()
